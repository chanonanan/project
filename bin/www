#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-sequelize');
var http = require('http');
var models = require('../models');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);

// require('../remote/server/mstsc')(server);
models.sequelize.sync().then(function () {
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port, function () {
    debug('Express server listening on port ' + server.address().port);
  });
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// var io = require('socket.io').listen(server);

// io.sockets.on('connection', function (socket) {
//   console.log('user connected');
//   // io.sockets.emit('start-test', "true");
//   io.sockets.emit('pattern', { next: 'D', text: "Start" })

//   socket.on('disconnect', function () {
//     console.log('user disconnected');
//   });

//   socket.on('message', function (message) {
//     console.log(message);
//     io.sockets.emit('message', { type: 'new-message', text: "message" })
//   })

//   socket.on('start', function (message) {
//     console.log(message);
//     io.sockets.emit('start', { type: 'new-message', text: "message" })
//   })
// });

// let io = require('socket.io')(server);

// // place this middleware before any other route definitions
// // makes io available as req.io in all request handlers
// app.use(function(req, res, next) {
//     req.io = io;
//     next();
// });

// require('../socket.js')(io);
